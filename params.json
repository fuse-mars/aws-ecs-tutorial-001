{"name":"Aws-ecs-tutorial-001","tagline":"This tutorial introduces you on how to run a gradle based project using the AWS ecs-cli tool.","body":"# AWS ECS Tutorial\r\nThis tutorial introduces you on how to run a gradle based project using the AWS ecs-cli tool.\r\n\r\nBullet points:\r\n* Audience\r\n* Define AWS ECS\r\n* Use case\r\n* [Step by step walkthrough](#step-by-step-walkthrough)\r\n* Future work\r\n\r\n## Audience\r\nThis tutorial is for people who knows how to use Docker, DOcker Compose, and write gradle based applications.\r\nYou should also be familiar with Amazon Webservices (AWS).\r\n\r\n## Define AWS ECS\r\nAWS EC2 Container Service (ECS) is a container management service that allows users to run containers in a scalable and secure way. For more info you visit [AWS website](https://aws.amazon.com/ecs/).\r\n\r\nYou interact with aws ecs, through the AWS web console or by using [ecs-cli](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI.html), the command line tool provided by Amazon.\r\n\r\n## Use case\r\n\r\n\r\n## Step by step walkthrough\r\n\r\nWe are going to use [an application](http://fuse-mars.github.io/spring-akka-command/) that allows you to save your Food spending. I used a \"ubuntu 14.04 x86_64\" machine for this tutorial.\r\n\r\n* Installing ecs-cli\r\n  \r\n  Follow [the link from AWS](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html) to install and configure ecs-cli.\r\n\r\n* Getting the Application code\r\n  ecs-cli uses docker-compose like syntax, so the basic knowledge of Docker Compose is expected. \r\n  There some exceptions though:\r\n  * ecs-cli does not support \"dockerfile\" configuration value, so you always have to use \"image\" value.\r\n  * \r\n\r\nYou can use [my pre built docker image](https://hub.docker.com/r/fusemars/akkaspring_command/) of the application\r\n```shell\r\ndocker pull fusemars/akkaspring_command\r\n```\r\nor download the code and build your own\r\n```dockerfile\r\n# Dockerfile content\r\n\r\nFROM niaquinto/gradle\r\nMAINTAINER Full Name <username@company.com>\r\nWORKDIR /\r\n\r\nRUN apt-get update\r\nRUN apt-get dist-upgrade -y\r\n\r\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\r\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install python-software-properties\r\nRUN DEBIAN_FRONTEND=noninteractive apt-get -y install software-properties-common\r\n\r\nRUN DEBIAN_FRONTEND=noninteractive apt-get install --yes --force-yes git\r\n\r\nRUN git clone https://github.com/fuse-mars/spring-akka-command.git\r\n\r\nRUN echo $(ls -al /)\r\nEXPOSE 9090\r\n\r\nCMD [\" build bootRun\"]\r\n\r\nENTRYPOINT gradle build bootRun -p spring-akka-command\r\n```\r\n\r\n```\r\ndocker build -t username/akkaspring_command -f Dockerfile . # replace \"username\" with your dockerhub username\r\n```\r\n\r\n* Setting up the docker-compose.yml file\r\n```yml\r\n# replace \"username\" with your dockerhub username\r\nweb:\r\n  image: username/akkaspring_command\r\n  cpu_shares: 100\r\n  mem_limit: 1024288000\r\n  ports:\r\n   - \"9090:9090\"\r\n  environment:\r\n   - HOSTNAME=localhost\r\n\r\n```\r\n* Test locally\r\n```shell\r\ndocker-compose --file docker-compose-use-image.yml up\r\n```\r\nAfter successiful run, you should be able to access your app at `<host-ip>:9090`\r\n* Creating the cluster\r\n```shell\r\nexport AWS_ACCESS_KEY_ID=<aws-id>\r\nexport AWS_SECRET_ACCESS_KEY=<aws-secret>\r\necs-cli configure --region us-east-1 --access-key $AWS_ACCESS_KEY_ID --secret-key $AWS_SECRET_ACCESS_KEY --cluster food-spending #replace \"food-spending\" with your favorite name\r\necs-cli up --keypair id_rsa --capability-iam --size 2 --instance-type t2.medium # replace \"id_rsa\" with the name of your existing aws keypair.\r\n```\r\nHere we have two important commands `ecs-cli configure` and `ecs-cli up`. The former configures your machine so that ecs-cli can connect to aws and access ec2 instances easily. The latter creates the cluster and adds instances to it.\r\n\r\nThe `ecs-cli up` allows to specify the security group `--security-group group_id`, which is good when you want to enable diffrent port for public access. howevwer, i could not get it to work **LEFT FOR TODO**\r\n\r\n* Running the application\r\n```shell\r\necs-cli compose --file docker-compose.yml service up # replace \"docker-compose.yml\"  with the path to your docker-compose file\r\n```\r\n* Cleaning up everything\r\n```\r\necs-cli compose --file docker-compose.yml service rm\r\necs-cli down --force\r\n```\r\n\r\n## Future work\r\n* How do you assign domain names to instances of the ecs cluster?\r\n* How to use cloud front with ecs?\r\n* Is there a possibility to run multiple apps on the same cluster?\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}